import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";
import {
  IsEmail,
  IsNotEmpty,
  IsString,
  Length,
  Matches,
} from "class-validator";

@Entity()
export class Client {
  @PrimaryGeneratedColumn()
  id!: number;

  @Column()
  @IsNotEmpty()
  @IsString()
  name!: string;

  @Column()
  @IsNotEmpty()
  @IsString()
  address!: string;

  @Column()
  @IsNotEmpty()
  @IsString()
  @Length(5, 20) // adjust length according to ID format
  idCardNumber!: string;

  @Column()
  @IsNotEmpty()
  @Matches(/^\+?[0-9\s\-]{7,15}$/) // basic phone regex
  phone!: string;

  @Column()
  @IsEmail()
  email!: string;
}
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  JoinColumn,
} from "typeorm";
import { Client } from "./Clients";
import { Vehicle } from "./Vehicles";
import {
  IsDate,
  IsEnum,
  IsNumber,
  IsOptional,
  Min,
} from "class-validator";

export enum RentalStatus {
  ONGOING = "ongoing",
  CLOSED = "closed",
}

@Entity()
export class Rental {
  @PrimaryGeneratedColumn()
  id!: number;

  @ManyToOne(() => Client, { eager: true })
  @JoinColumn({ name: "clientId" })
  client!: Client;

  @ManyToOne(() => Vehicle, { eager: true })
  @JoinColumn({ name: "vehicleId" })
  vehicle!: Vehicle;

  @Column({ type: "date" })
  @IsDate()
  startDate!: Date;

  @Column({ type: "date", nullable: true })
  @IsOptional()
  @IsDate()
  endDate?: Date;

  @Column({ type: "decimal", nullable: true })
  @IsOptional()
  @IsNumber()
  @Min(0)
  totalPrice?: number;

  @Column({ type: "decimal", nullable: true })
  @IsOptional()
  @IsNumber()
  @Min(0)
  kilometersDriven?: number;

  @Column({ default: false })
  damaged!: boolean;

  @Column({ type: "decimal", nullable: true })
  @IsOptional()
  @IsNumber()
  @Min(0)
  damageFee?: number;

  @Column({
    type: "enum",
    enum: RentalStatus,
    default: RentalStatus.ONGOING,
  })
  @IsEnum(RentalStatus)
  status!: RentalStatus;
}
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";
import {
  IsDate,
  IsEnum,
  IsNotEmpty,
  IsNumber,
  IsString,
  Min,
} from "class-validator";

export enum VehicleStatus {
  FREE = "free",
  RENTED = "rented",
  SCRAPPED = "scrapped",
}

export enum VehicleType {
  CAR = "car",
  BOAT = "boat",
}

@Entity()
export class Vehicle {
  @PrimaryGeneratedColumn()
  id!: number;

  @Column({
    type: "enum",
    enum: VehicleType,
    default: VehicleType.CAR,
  })
  @IsNotEmpty()
  @IsEnum(VehicleType)
  type!: VehicleType;

  @Column()
  @IsNotEmpty()
  @IsString()
  manufacturer!: string;

  @Column()
  @IsNotEmpty()
  @IsString()
  licensePlate!: string;

  @Column()
  @IsNotEmpty()
  @IsString()
  chassisNumber!: string;

  @Column({ type: "date" })
  @IsDate()
  purchaseDate!: Date;

  @Column()
  @IsNotEmpty()
  @IsString()
  serialNumber!: string;

  @Column("decimal", { precision: 10, scale: 2 })
  @IsNumber()
  @Min(0)
  rentalPrice!: number;

  @Column("decimal", { precision: 10, scale: 2 })
  @IsNumber()
  @Min(0)
  kmPrice!: number;

  @Column({
    type: "enum",
    enum: VehicleStatus,
    default: VehicleStatus.FREE, // <-- Default here
  })
  @IsNotEmpty()
  @IsEnum(VehicleStatus)
  status!: VehicleStatus;
}
import { Router } from "express";
import { AppDataSource } from "../data-source";
import { Client } from "../entity/Clients";
import { validate } from "class-validator";

const router = Router();
const clientRepo = AppDataSource.getRepository(Client);

router.post("/", async (req, res) => {
  try {
    const client = clientRepo.create(req.body);

    const errors = await validate(client);
    if (errors.length > 0) {
      return res.status(400).json(errors);
    }

    const result = await clientRepo.save(client);
    res.status(201).json(result);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

router.get("/", async (req, res) => {
  try {
    const clients = await clientRepo.find();
    res.json(clients);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

router.get("/:id", async (req, res) => {
  try {
    const client = await clientRepo.findOneBy({ id: Number(req.params.id) });
    if (!client) return res.status(404).json({ error: "Client not found" });
    res.json(client);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

router.put("/:id", async (req, res) => {
  try {
    const client = await clientRepo.findOneBy({ id: Number(req.params.id) });
    if (!client) return res.status(404).json({ error: "Client not found" });

    clientRepo.merge(client, req.body);

    const errors = await validate(client);
    if (errors.length > 0) {
      return res.status(400).json(errors);
    }

    const result = await clientRepo.save(client);
    res.json(result);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// DELETE route to delete a client by id
router.delete("/:id", async (req, res) => {
  try {
    const client = await clientRepo.findOneBy({ id: Number(req.params.id) });
    if (!client) return res.status(404).json({ error: "Client not found" });

    await clientRepo.remove(client);
    res.status(204).send();
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

export default router;
import { Router, Request, Response } from "express";
import { AppDataSource } from "../data-source";
import { Rental, RentalStatus } from "../entity/Rentals";
import { Client } from "../entity/Clients";
import { Vehicle, VehicleStatus } from "../entity/Vehicles";

const router = Router();

const rentalRepo = AppDataSource.getRepository(Rental);
const clientRepo = AppDataSource.getRepository(Client);
const vehicleRepo = AppDataSource.getRepository(Vehicle);

function parseDate(dateStr: any): Date | null {
  const date = new Date(dateStr);
  return isNaN(date.getTime()) ? null : date;
}

// Create a new rental
router.post("/", async (req: Request, res: Response) => {
  try {
    const { clientId, vehicleId, startDate } = req.body;

    const client = await clientRepo.findOneBy({ id: clientId });
    const vehicle = await vehicleRepo.findOneBy({ id: vehicleId });

    if (!client || !vehicle) {
      return res.status(400).json({ error: "Invalid client or vehicle ID" });
    }

    if (vehicle.status !== VehicleStatus.FREE) {
      return res.status(400).json({ error: "Vehicle is not available for rent" });
    }

    const parsedStartDate = parseDate(startDate);
    if (!parsedStartDate) {
      return res.status(400).json({ error: "Invalid or missing startDate" });
    }

    // Create rental
    const rental = rentalRepo.create({
      client,
      vehicle,
      startDate: parsedStartDate,
      status: RentalStatus.ONGOING,
      damaged: false,
    });

    await rentalRepo.save(rental);

    // Update vehicle status to RENTED
    vehicle.status = VehicleStatus.RENTED;
    await vehicleRepo.save(vehicle);

    // Return saved rental with relations
    const savedRental = await rentalRepo.findOne({
      where: { id: rental.id },
      relations: ["client", "vehicle"],
    });

    res.status(201).json(savedRental);
  } catch (error: any) {
    console.error("Error creating rental:", error.message || error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Get all rentals with client and vehicle
router.get("/", async (req: Request, res: Response) => {
  try {
    const rentals = await rentalRepo.find({ relations: ["client", "vehicle"] });
    res.json(rentals);
  } catch (error: any) {
    console.error("Error fetching rentals:", error.message || error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Get rental by ID with client and vehicle
router.get("/:id", async (req: Request, res: Response) => {
  try {
    const rental = await rentalRepo.findOne({
      where: { id: Number(req.params.id) },
      relations: ["client", "vehicle"],
    });
    if (!rental) return res.status(404).json({ error: "Rental not found" });
    res.json(rental);
  } catch (error: any) {
    console.error("Error fetching rental:", error.message || error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Close rental: set endDate, kilometersDriven, damaged, calculate totalPrice, update status and vehicle status
router.put("/close/:id", async (req: Request, res: Response) => {
  try {
    const rental = await rentalRepo.findOne({
      where: { id: Number(req.params.id) },
      relations: ["vehicle", "client"],
    });
    if (!rental) return res.status(404).json({ error: "Rental not found" });

    // FIX: Convert startDate to Date if needed
    if (!(rental.startDate instanceof Date)) {
      rental.startDate = new Date(rental.startDate);
    }

    const { endDate, kilometersDriven, damaged } = req.body;

    const parsedEndDate = parseDate(endDate);
    if (!parsedEndDate || kilometersDriven === undefined) {
      return res.status(400).json({ error: "endDate and kilometersDriven are required and must be valid" });
    }

    // Update rental fields
    rental.endDate = parsedEndDate;
    rental.kilometersDriven = Number(kilometersDriven);
    rental.damaged = Boolean(damaged);

    // Calculate rental days (at least 1 day)
    const diffTime = rental.endDate.getTime() - rental.startDate.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    const rentalDays = diffDays > 0 ? diffDays : 1;

    // Calculate totalPrice: dailyPrice * days + kmPrice * kilometers + damageFee if damaged
    const dailyPrice = rental.vehicle.rentalPrice;
    const kmPrice = rental.vehicle.kmPrice;

    let damageFee = 0;
    if (rental.damaged) {
      damageFee = 100; // flat damage fee (can be adjusted)
    }

    rental.damageFee = damageFee;  // <-- assign damageFee here

    rental.totalPrice = Number((dailyPrice * rentalDays + kmPrice * rental.kilometersDriven + damageFee).toFixed(2));
    rental.status = RentalStatus.CLOSED;

    await rentalRepo.save(rental);

    // Update vehicle status to FREE when rental is closed
    const vehicle = rental.vehicle;
    vehicle.status = VehicleStatus.FREE;
    await vehicleRepo.save(vehicle);

    // Return updated rental with relations
    const updatedRental = await rentalRepo.findOne({
      where: { id: rental.id },
      relations: ["client", "vehicle"],
    });

    res.json(updatedRental);
  } catch (error: any) {
    console.error("Error closing rental:", error.message || error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

export default router;
import "reflect-metadata";
import { DataSource } from "typeorm";
import { Client } from "./entity/Clients";
import { Vehicle } from "./entity/Vehicles";
import { Rental } from "./entity/Rentals";

export const AppDataSource = new DataSource({
  type: "mysql",
  host: "localhost",
  port: 3306,
  username: "root",          // Your MySQL username
  password: "",              // Your MySQL password (usually empty by default on WAMP)
  database: "rentacar",  // Your database name (create this in MySQL beforehand)
  synchronize: true,         // Only for development: auto create tables
  logging: false,
  entities: [Client, Vehicle, Rental],        // Entities you create later
  migrations: [],
  subscribers: [],
});
import "reflect-metadata";
import express from "express";
import { AppDataSource } from "./data-source";
import clientRouter from "./routes/client";
import vehicleRouter from "./routes/vehicle";
import rentalRouter from "./routes/rental";

const app = express();
const PORT = 3000;

// Middleware to parse JSON bodies
app.use(express.json());

// Use the client routes at /clients
app.use("/clients", clientRouter);
// Use the vehicles routes at /vehicles
app.use("/vehicles", vehicleRouter);
// Use the rental routes at /rentals
app.use("/rentals", rentalRouter);

// Root route for quick check
app.get("/", (req, res) => {
  res.send("Hello, your server and DB are ready!");
});

// Initialize database and start server
AppDataSource.initialize()
  .then(() => {
    console.log("Data Source has been initialized!");
    app.listen(PORT, () => {
      console.log(`Server running on http://localhost:${PORT}`);
    });
  })
  .catch((error) => {
    console.error("Error during Data Source initialization:", error);
  });
